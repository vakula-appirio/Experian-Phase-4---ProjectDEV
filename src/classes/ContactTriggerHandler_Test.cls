/***************************************************************************************************
 * Name: Mohammed Irfan
 * Date: 12/Dec/2013
 * Description: Test for Adding Owner to Contact Team.
 * Date Modified       Modified By                  Description of the update
 * Sep 8th, 2014      Noopur (Appirio)              Changed the Class name. 
 *                                                  Added the test method to verify the Container Account 
 *                                                  Functionality added for task T-313856
 * Sep 8th, 2014      Naresh kr Ojha                T-317847: Added test method to test onDemandContact method.
 * Dec 12th,2014      Noopur                        T-339472 : added method test_orderOnDemandSync()
 * Dec 19th,2014      Arpita Bose                   Updated methods test_onDemandContact() and test_orderOnDemandSync() to populate 
 *                                                  con.Phone for OnDemand Decider contact
 * Feb 9th, 2015      Paul Kissick                  Added method testContactMergeChecks() to test cleanup of contacts post merge.
 * Feb 19th, 2015     Paul Kissick                  Case #29746 - Changed testContactMergeChecks() to also check for mergehistory record. 
 * Apr 7th, 2015      Paul Kissick                  Case #50069 : Better testing of the contact merge checks.\
 * Apr 29th, 2015     Suminder Singh(Appirio)       Fixed test_onDemandContact() for test class failures
 ****************************************************************************************************/
@isTest(seeAllData=false)
private class ContactTriggerHandler_Test {

    static testMethod void runTest() {
      User usr = [select id from User where IsActive=true limit 1];
      Contact con = new Contact(FirstName='First',LastName='Last',OwnerId=usr.id);
      insert con;
      
    }

    //=======================================================================
    // Testing onDemandContact to check other contacts should not be onDemand
    //=======================================================================
    static testMethod void test_onDemandContact () {
      //create test user 
      User testUser = Test_Utils.createUser(Constants.PROFILE_SYS_ADMIN);
      insert  testUser;
      
      System.runAs(testUser) {
        Account testAccount = Test_Utils.insertEDQAccount(true);

        Contact testContact0;
        List<Contact> contactsToInsert = new List<Contact>();
        for (Integer i = 0; i < 20; i++) {
          testContact0 = Test_Utils.createContact(testAccount.ID);
          testContact0.EDQ_On_Demand__c = false;
          if (i == 0) {
            testContact0.EDQ_On_Demand__c = true;
          }
          testContact0.Email = 'testemail00'+i+'@test.com';
          testContact0.Title = 'testTitle';
          testContact0.Inactive__c = false;
          testContact0.EDQ_Integration_Id__c = String.valueOf(Math.random());
          testContact0.Phone = '9799559433';
          contactsToInsert.add(testContact0);
        }
        insert contactsToInsert;
        system.debug('***contactsToInsert>>>' +contactsToInsert);
        
        List<Contact> onDemandContacts = [SELECT EDQ_On_Demand__c, ID, Email FROM Contact WHERE ID IN: contactsToInsert AND EDQ_On_Demand__c = true];
        
        System.assertEquals(1, onDemandContacts.size());
        system.debug('onDemandContacts>>>' +onDemandContacts);
        
        Test.startTest();
        /*Contact testContact1 = Test_Utils.insertEDQContact(testAccount.ID, false); 
        testContact1.EDQ_On_Demand__c = true;
        testContact1.Email = 'testemail001@test.com';
        testContact1.Title = 'testTitle';
        testContact1.Inactive__c = false;
        testContact1.Phone = '9723876478';
        insert testContact1;*/
        contactsToInsert[1].EDQ_On_Demand__c = true;
        update contactsToInsert[1];
        Test.stopTest();
        List<Contact> onDemandContacts1 = [SELECT EDQ_On_Demand__c, ID, Email FROM Contact WHERE ID = :contactsToInsert[0].Id AND EDQ_On_Demand__c = true];
        System.assert(onDemandContacts1.size() == 0);
        List<Contact> con = [SELECT Id, EDQ_On_Demand__c, AccountId 
			                       FROM Contact
			                       WHERE AccountID =: testAccount.ID];
        system.debug('con >>>' +con);
                       
        System.assert(Limits.getDMLStatements() < 20);
        //Insertion of new OnDemand Contact should make previous one false on EDQ_On_Demand__c
        contactsToInsert = [SELECT EDQ_On_Demand__c, ID FROM Contact WHERE ID IN: contactsToInsert];
        system.debug('contactsToInsert>>>' +contactsToInsert);
        
        
        //for (Integer i = 0; i< 200; i++) {
        //  System.assertEquals(contactsToInsert.get(0).EDQ_On_Demand__c, false);
        //}
      }
    }
    
    //=======================================================================
    // Testing onDemandContact to check other contacts should not be onDemand
    //=======================================================================
/*    static testMethod void test_orderOnDemandSync () {
      //create test user 
      User testUser = Test_Utils.createUser(Constants.PROFILE_SYS_ADMIN);
      insert  testUser;
      
      System.runAs(testUser) {
        Account testAccount = Test_Utils.insertEDQAccount(true);

        Contact testContact0;
        List<Contact> contactsToInsert = new List<Contact>();
        for (Integer i = 0; i < 5; i++) {
          testContact0 = Test_Utils.createContact(testAccount.ID);
          testContact0.EDQ_On_Demand__c = false;
          if (i == 0) {
            testContact0.EDQ_On_Demand__c = true;
          }
          testContact0.Email = 'testemail00'+i+'@test.com';
          testContact0.Title = 'testTitle';
          testContact0.Inactive__c = false;
          testContact0.EDQ_Integration_Id__c = String.valueOf(Math.random());
          testContact0.EDQ_Send_to_On_Demand__c = true;
          testContact0.Phone = '9799559433';
          contactsToInsert.add(testContact0);
        }
        insert contactsToInsert;
        
        List<Order__c> orderList = new List<Order__c>();
        for (Integer i=0; i<5; i++) {
          Order__c ordObj = new Order__c();
          ordObj.contact__c = contactsToInsert[i].Id;
          ordObj.Account__c = contactsToInsert[i].AccountId;
          ordObj.Name = 'testOrder'+i;
          ordObj.Type__c = 'New';
          ordObj.PO_Required__c = 'No';
          ordObj.Transactional_Sale__c = true;
          orderList.add(ordObj);
        }
        insert orderList;
        
        List<Order_Line_Item__c> oliList = new List<Order_Line_Item__c>();
        for (Integer i=0; i<5; i++) {
          Order_Line_Item__c oliObj = new Order_Line_Item__c();
          oliObj.Order__c = orderList[i].Id;
          oliObj.EDQ_On_Demand_Product__c = true;
          oliObj.Type__c = 'One-off Sale';
          oliList.add(oliObj);
        }
        insert oliList;

        Test.startTest();
        for (Integer i=0; i<5; i++) {
          contactsToInsert[i].EDQ_Send_to_On_Demand__c = false;
        }
        update contactsToInsert;
        
        Test.stopTest();
        
        orderList = [SELECT EDQ_Send_to_On_Demand__c, ID FROM Order__c WHERE Contact__c IN: contactsToInsert];
        for (Integer i = 0; i< 5; i++) {
          System.assertEquals(orderList.get(i).EDQ_Send_to_On_Demand__c, true);
        }
      }
    }
   
    
    //=======================================================================
    // Test for merging contact related information
    //=======================================================================
    static testMethod void testContactMergeChecks () {
      
      // we need 2 contacts, an address on each, and a role on each.
      Account acc1 = Test_Utils.insertAccount();
      Contact cont1 = new Contact(FirstName = 'Test1', LastName = 'Contact', AccountId = acc1.Id);
      Contact cont2 = new Contact(FirstName = 'Test2', LastName = 'Contact', AccountId = acc1.Id);
      insert new Contact[]{cont1,cont2};
      
      Address__c contAddr = Test_Utils.insertAddress(true);
      
      // Add the same address to both records.
      Contact_Address__c cAdd1 = Test_Utils.insertContactAddress(true,contAddr.Id,cont1.Id);
      Contact_Address__c cAdd2 = Test_Utils.insertContactAddress(true,contAddr.Id,cont2.Id);
      
      system.assertEquals(1,[SELECT COUNT() FROM Contact_Team__c WHERE Contact__c = :cont1.Id],'There should only be 1 Contact Team member.');
      system.assertEquals(1,[SELECT COUNT() FROM Contact_Team__c WHERE Contact__c = :cont2.Id],'There should only be 1 Contact Team member.');
      
      system.assertEquals(1,[SELECT COUNT() FROM Contact_Address__c WHERE Contact__c = :cont1.Id],'There should only be 1 Contact Address.');
      system.assertEquals(1,[SELECT COUNT() FROM Contact_Address__c WHERE Contact__c = :cont2.Id],'There should only be 1 Contact Address.');
      
      // now, lets merge the 2 contacts, 
      system.debug('**** Your IsDataAdmin setting: '+(((Boolean)IsDataAdmin__c.getInstance().IsDataAdmin__c) ? ' ENABLED ' : ' DISABLED '));
      IsDataAdmin__c disableIsDataAdm = new IsDataAdmin__c(SetupOwnerId = UserInfo.getUserId(), IsDataAdmin__c = false);
      insert disableIsDataAdm;

      Test.startTest();

      Database.merge(cont1,cont2);

      Test.stopTest();

      system.assertEquals(1,[SELECT COUNT() FROM Contact],'There should only be 1 contact left.');

      system.assertEquals(1,[SELECT COUNT() FROM Contact_Team__c WHERE Contact__c = :cont1.Id],'There should only be 1 Contact Team member, after merge');
      system.assertEquals(1,[SELECT COUNT() FROM Contact_Address__c WHERE Contact__c = :cont1.Id],'There should only be 1 Contact Address, after merge');
      
      system.assertEquals(0,[SELECT COUNT() FROM Contact_Team__c WHERE Contact__c = :cont2.Id],'There shouldn\'t be any contact team members left on losing record.');
      system.assertEquals(0,[SELECT COUNT() FROM Contact_Address__c WHERE Contact__c = :cont2.Id],'There shouldn\'t be any contact addresses left on losing record.');
      
      // MergeHistory should be created too 
      system.assertEquals(1,[SELECT COUNT() FROM MergeHistory__c WHERE Winner_Record_ID__c = :cont1.Id],'Unable to find MergeHistory record');

      
    } */

}