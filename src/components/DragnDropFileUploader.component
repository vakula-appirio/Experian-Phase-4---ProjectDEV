<!--
/**=====================================================================
 * Appirio, Inc
 * Name: DragnDropFileUploader
 * Description: T-358314:
 * Created Date: Feb 03rd, 2015
 * Created By: Arpita Bose(Appirio)
 *
 * Date Modified      Modified By              Description of the update
 * Mar 10th,2015      Noopur                   Added the code to show alert if the upload fails
 * Apr 23rd, 2015     Paul Kissick             I-156934: Replaced the code in the uploadFiles and uploadFileAsAttachmentToRecord methods below to use the rest api instead.
  =====================================================================*/
-->
<apex:component controller="DragnDropFileUploadController"  allowDML="true">

 <!-- here we will add custom styling -->
 <apex:attribute name="parentId" assignTo="{!parentId}" description="The ID of the record uploaded documents will be attached to." type="String" required="true"/>
 <apex:attribute name="multiple" default="false" description="Whether you want multiple files /single" type="Boolean" required="false"/>
 <apex:attribute name="retUrl" default="/{!parentId}" description="Return Url after upload is completed" type="string" required="false" />

 <link rel="stylesheet" type="text/css" href="{!URLFOR($Resource.DragnDropFileUploader,'style.css')}"/>
 <!-- INCLUDING JQUERY-->
 <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"/>

  <script type="text/javascript">
        var parentId = '{!parentId}'; //Will be used by FileUploadJS.js but must be declared here. Static resources dont support dynamic values.
        var multiple = '{!multiple}';
        var retUrl = '{!retUrl}';
  </script>

   <div class="content" id="latest_browsers">
    <div id="drop-files" ondragover="return false">
        <span id="drop_message_here">{!$Label.DROP_FILES_HERE}</span>
        <div id="uploaded-holder">
            <div id="dropped-files">
                <div id="upload-button">
                    <a href="#" class="upload">{!$Label.UPLOAD}</a>
                    <a href="#" class="delete">{!$Label.DELETE}</a>
                    <span>{!$Label.ZERO_FILES}</span>
                </div>
            </div>
            <div id="extra-files">
                <div class="number">
                    0
                </div>
                <div id="file-list">
                    <ul></ul>
                </div>
            </div>
        </div>
    </div>

     <div id="file-name-holder" style="display:none;" >
     </div>
</div>

<div id="ie-fallback" style="display:none;">
      <apex:form id="theFrm">
      <apex:pageBlock title="{!$Label.UPLOAD_ATTACHMENT_TITLE}" >
            <apex:pageBlockButtons >
                <apex:commandButton value="{!$Label.UPLOAD_ATTACHMENT_BTN}" action="{!uploadFile}" />

            </apex:pageBlockButtons>
             <apex:pageBlockSection showHeader="false" columns="2" id="block1">
                    <apex:pageBlockSectionItem >
                        <apex:outputLabel value="File" for="file"/>
                        <apex:inputFile value="{!attachment.body}" filename="{!attachment.name}" id="file"/>
                    </apex:pageBlockSectionItem>
                </apex:pageBlockSection>
       </apex:pageBlock>
  </apex:form>
</div>


<!-- include the js file to upload the files -->
<!-- issues w/ slice moved to inline<script type="text/javascript" src="{!URLFOR($Resource.DragnDropFileUploader,'uploader.js')}"></script> -->
<script type="text/javascript">
$j=jQuery.noConflict();
var files;
// Get all of the data URIs and put them in an array
var dataArray = [];

var maxUploadSize = 26214400; // 25MB 

var byteChunkArray;
var currentFile;
var $upload;
var CHUNK_SIZE = 180000; //Must be evenly divisible by 3, if not, data corruption will occur
var VIEW_URL = '/servlet/servlet.FileDownload?file=';
var number_file=0;

var sfdcHostName =window.location.host.split('.')[1]; 

tests = {
    filereader: typeof FileReader != 'undefined',
    dnd: 'draggable' in document.createElement('span'),
    formdata: !!window.FormData,
    progress: "upload" in new XMLHttpRequest
};

var showTooBigOrErrorAlert = function() {
  alert('{!JSENCODE($Label.DragnDropFileUploader_Alert_Message_For_Upload_File)}');
};

function startTheUpload(){
    //Build out the upload divs for each file selected


        var uploadMarkup = '';
        for(i = 0; i < dataArray.length; i++){
            //Determine file display size
            if(dataArray[i].fileitem.size < 1000000){
                var displaySize = Math.floor(dataArray[i].fileitem.size/1024) + 'K';
            }else{
                var displaySize  = Math.round((dataArray[i].fileitem.size / (1024*1024))*10)/10 + 'MB';
            }

            //For each file being uploaded create a div to represent that file, includes file size, status bar, etc. data-Status tracks status of upload
            uploadMarkup += '<div class="upload" data-status="pending" data-index="'+i+'">'; //index used to correspond these upload boxes to records in the files array
            uploadMarkup += '<div  class="fileName"><span class="name">'+ dataArray[i].fileitem.name + '</span> - '+ displaySize+ '</div>';
            uploadMarkup += '<div class="percentComplete">0%</div>'
            uploadMarkup += '<div class="clear"/>';
            uploadMarkup += '<div class="statusBar">';
            uploadMarkup += '<div class="statusBarPercent"> </div>';
            uploadMarkup += '</div>';
            uploadMarkup += '</div>';
        }

        $j('#drop-files').fadeOut();

        //Add markup to the upload box
        $j('#file-name-holder').append(uploadMarkup).fadeIn();

        //Once elements have been added to the page representing the uploads, start the actual upload process
        uploadFiles();
}

function uploadFiles(){
  //Get div of the first matching upload element that is 'pending', if none, all uploads are complete
  $upload = $j(".upload:first[data-status='pending']");
  if($upload.length != 0) {
    //Based on index of the div, get correct file from files array
    currentFile = dataArray[$upload.attr('data-index')].fileitem;
    if (currentFile.size > maxUploadSize) {
	    $upload.attr('data-status','complete');
	    $upload.addClass('uploadError');
	    $upload.find(".statusBarPercent").addClass('loading-bar-error');
      showTooBigOrErrorAlert();
      uploadFiles();
    }
    else {
      uploadFileAsAttachmentToRecord();
     }
  }
  else {
    //once all the upload are completed :- refresh the window to show the attachments
    refreshThePage();
  }
}//end of the function file uploads


function refreshThePage(){
     /*var url_split = window.location.href.replace('https://','').split('\.');
     var instance ='';

      if(url_split.length ==3)
          instance =url_split[0];
      else if(url_split.length >=5)
          instance =url_split[1];
      //alert(instance);
      //alert(retUrl); */

      var domUrl = '{!domainURL}';
      //alert('---domUrl---' +domUrl);

      window.open ('https://'+domUrl+retUrl, "_top");


}


//Uploads a chunk of bytes, if attachmentId is passed in it will attach the bytes to an existing attachment record
function uploadFileAsAttachmentToRecord(){
  var xhr = new XMLHttpRequest();
  var sfdcurl = 'https://'+sfdcHostName+'.salesforce.com/services/apexrest/DragAndDrop/v1?FileName='+encodeURIComponent(currentFile.name)+'&cType='+encodeURIComponent(currentFile.type)+'&parId={!parentId}' ;
  
  xhr.open('POST','/services/proxy' );

  xhr.setRequestHeader("Authorization","Bearer {!$Api.Session_ID}");
  xhr.setRequestHeader('SalesforceProxy-Endpoint', sfdcurl);
  xhr.setRequestHeader('X-User-Agent', 'DragAndDropAPI v1.0');
    
  xhr.onload = function() {
    if (xhr.responseText !== '') {
	    $upload.find(".percentComplete").text('100%');
	    $upload.find(".statusBarPercent").css('width','100%');
	    $upload.attr('data-status','complete');
	    $upload.find(".name").html('<a href="' + VIEW_URL + xhr.responseText + '" target="_blank">'+currentFile.name+'</a>');
	  }
	  else {
      $upload.attr('data-status','complete');
      $upload.addClass('uploadError');
      $upload.find(".statusBarPercent").addClass('loading-bar-error');
      $upload.attr('title',xhr.responseText);
      showTooBigOrErrorAlert();
	  }
	  uploadFiles();
  };
  
  if (tests.progress) {
    xhr.upload.onprogress = function (event) {
      if (event.lengthComputable) {
        var complete = (event.loaded / event.total * 100 | 0);
        $upload.find(".percentComplete").text(complete+'%');
        $upload.find(".statusBarPercent").css('width',complete+'%');
      }
    }
  }
  
  xhr.onreadystatechange=function() {
    if (xhr.readyState==4 && xhr.status != 200) {
      $upload.attr('data-status','complete');
      $upload.addClass('uploadError');
      $upload.find(".statusBarPercent").addClass('loading-bar-error');
      $upload.attr('title',xhr.responseText);
      showTooBigOrErrorAlert();
    }
  }
  xhr.send(currentFile);
}




$j(document).ready(function() {

    //here we check if the browser is ie
    var is_chromeframe = navigator.userAgent.toLowerCase().indexOf('chromeframe') > -1;
    if($j.browser.msie){
        //we are using IE Browser
        $j('#ie-fallback').show();
        $j('#latest_browsers').hide();
    }

    // Makes sure the dataTransfer information is sent when we
    // Drop the item in the drop box.
    jQuery.event.props.push('dataTransfer');

    var z = -40;
    // The number of images to display
    var maxFiles = 5;
    var errMessage = 0;


    // Bind the drop event to the dropzone.
    $j('#drop-files').bind('drop', function(e) {

        // Stop the default action, which is to redirect the page
        // To the dropped file

        files= e.dataTransfer.files; // add the file to array
        if(multiple=='false'){
            $j.each(files, function(index, file) {
                dataArray.push({name : file.name, value :'',fileitem :file});
            });
            startTheUpload();
            return;
        }

        // Show the upload holder
        $j('#uploaded-holder').show();

        $j('#drop_message_here').hide();

        // For each file
        $j.each(files, function(index, file) {
            // Check length of the total image elements
            var fileClass = 'others';
            var filetype=files[index].type;
            if (filetype.match('image.*')) {
                fileClass='images';
            }else if(filetype.search('excel')!=-1 || filetype.search('sheet')!=-1){
                fileClass='xls';
            }else if(filetype.search('document')!=-1 || filetype.search('msword')!=-1){
                fileClass='doc';
            }else if(filetype.search('pdf')!=-1){
                fileClass='pdf';
            }else if(filetype.search('html')!=-1){
                fileClass='html';
            }



            if($j('#dropped-files > .image').length < maxFiles) {
                // Change position of the upload button so it is centered
                var imageWidths = ((80 + (40 * $j('#dropped-files > .image').length)) / 2) - 20;
                $j('#upload-button').css({'left' : imageWidths+'px', 'display' : 'block'});
            }

            dataArray.push({name : file.name, value : '',fileitem :file});
             // Move each image 40 more pixels across
            z = z+40;
            var image = this.result;


            // Just some grammatical adjustments
            if(dataArray.length == 1) {
                $j('#upload-button span').html("1 file to be uploaded");
            } else {
                $j('#upload-button span').html(dataArray.length+" files to be uploaded");
            }
            // Place extra files in a list
            if($j('#dropped-files > .image').length < maxFiles) {
                // Place the image inside the dropzone
                $j('#dropped-files').append('<div class="image '+fileClass+'" title="'+file.name+'" style="left: '+z+'px;  background-size: cover;"> </div>');
            }
            else {

                $j('#extra-files .number').html('+'+($j('#file-list li').length + 1));
                // Show the extra files dialogue
                $j('#extra-files').show();

                // Start adding the file name to the file list
                $j('#extra-files #file-list ul').append('<li>'+file.name+'</li>');

            }
        });


    });

    function restartFiles() {

        // This is to set the loading bar back to its default state
        //$j('#loading-bar .loading-color').css({'width' : '0%'});
        $j('#file-name-holder').css({'display' : 'none'});
        $j('#file-name-holder').html(' ');
        $j('#drop_message_here').show();
        // --------------------------------------------------------

        // We need to remove all the images and li elements as
        // appropriate. We'll also make the upload button disappear

        $j('#upload-button').hide();
        $j('#dropped-files > .image').remove();
        $j('#extra-files #file-list li').remove();
        $j('#extra-files').hide();
        $j('#uploaded-holder').hide();

        // And finally, empty the array/set z to -40
        files=null;
        dataArray.length = 0;
        z = -40;

        return false;
    }

    $j('#upload-button .upload').click(function() {
        //start the upload process
        startTheUpload();

        return false;
    });

    // Just some styling for the drop file container.
    $j('#drop-files').bind('dragenter', function() {
        $j(this).css({'box-shadow' : 'inset 0px 0px 20px rgba(0, 0, 0, 0.1)', 'border' : '1px dashed #bb2b2b'});
        return false;
    });

    $j('#drop-files').bind('drop', function() {
        $j(this).css({'box-shadow' : 'none', 'border' : '1px dashed rgba(0,0,0,0.2)'});
        return false;
    });

    // For the file list
    $j('#extra-files .number').toggle(function() {
        $j('#file-list').show();
    }, function() {
        $j('#file-list').hide();
    });

    $j('#dropped-files #upload-button .delete').click(restartFiles);
});

/*** 
 * These are the old JS methods, no longer required.
 
 
function uploadFilesOld(){
        //Get div of the first matching upload element that is 'pending', if none, all uploads are complete
        $upload = $j(".upload:first[data-status='pending']");

        if($upload.length != 0){
            //Based on index of the div, get correct file from files array
            currentFile = dataArray[$upload.attr('data-index')].fileitem;

            // Build the byteChunkArray array for the current file we are processing. This array is formatted as:
            // ['0-179999','180000-359999',etc] and represents the chunks of bytes that will be uploaded individually.
            byteChunkArray = new Array();

            //First check to see if file size is less than the chunk size, if so first and only chunk is entire size of file
            if(currentFile.size <= CHUNK_SIZE){
                byteChunkArray[0] = '0-' + (currentFile.size - 1);
            }else{
                //Determine how many whole byte chunks make up the file,
                var numOfFullChunks = Math.floor(currentFile.size / CHUNK_SIZE); //i.e. 1.2MB file would be 1000000 / CHUNK_SIZE
                var remainderBytes = currentFile.size % CHUNK_SIZE; // would determine remainder of 1200000 bytes that is not a full chunk
                var startByte = 0;
                var endByte = CHUNK_SIZE - 1;

                //Loop through the number of full chunks and build the byteChunkArray array
                for(i = 0; i < numOfFullChunks; i++){
                    byteChunkArray[i] = startByte+'-'+endByte;

                    //Set new start and stop bytes for next iteration of loop
                    startByte = endByte + 1;
                    endByte += CHUNK_SIZE;
                }

                //Add the last chunk of remaining bytes to the byteChunkArray
                startByte = currentFile.size - remainderBytes;
                endByte = currentFile.size;
                byteChunkArray.push(startByte+'-'+endByte);
            }

            //Start processing the byteChunkArray for the current file, parameter is '' because this is the first chunk being uploaded and there is no attachment Id
            uploadFileAsAttachmentToRecord('');
            

        }else{
            //once all the upload are completed :- refresh the window to show the attachments
           refreshThePage();
        }

}//end of the function file uploads




//Uploads a chunk of bytes, if attachmentId is passed in it will attach the bytes to an existing attachment record
function uploadFileAsAttachmentToRecordOld(attachmentId){
        //Proceed if there are still values in the byteChunkArray, if none, all piece of the file have been uploaded
        if(byteChunkArray.length > 0){

            //Determine the byte range that needs to uploaded, if byteChunkArray is like... ['0-179999','180000-359999']
            var indexes = byteChunkArray[0].split('-'); //... get the first index range '0-179999' -> ['0','179999']
            var startByte = parseInt(indexes[0]); //0
            var stopByte = parseInt(indexes[1]); //179999
            //Slice the part of the file we want to upload, currentFile variable is set in checkForUploads() method that is called before this method
            if(currentFile.webkitSlice){
                var blobChunk = currentFile.webkitSlice(startByte , stopByte + 1);
            }else if (currentFile.mozSlice) {
                var blobChunk = currentFile.mozSlice(startByte , stopByte + 1);
            }
            else if(currentFile.slice){
                var blobChunk = currentFile.slice(startByte, stopByte +1);
            }

            //Create a new reader object, part of HTML5 File API
            var reader = new FileReader();

            //Read the blobChunk as a binary string, reader.onloadend function below is automatically called after this line
            if(typeof(reader.readAsBinaryString) =='function')
                    reader.readAsBinaryString(blobChunk);
            else
                reader.readAsArrayBuffer(blobChunk);
            //Create a reader.onload function, this will execute immediately after reader.readAsBinaryString() function above;
            reader.onloadend = function(evt){
                if(evt.target.readyState == FileReader.DONE){ //Make sure read was successful, DONE == 2
                    //Base 64 encode the data for transmission to the server with JS remoting, window.btoa currently on support by some browsers
                    var base64value;
                    if(typeof(reader.readAsBinaryString) =='function'){
                        base64value = window.btoa(evt.target.result);
                    } else {
                        //base64value = window.btoa(blobChunk);
                        var binary = ''
                                        var bytes = new Uint8Array( evt.target.result )
                                        var len = bytes.byteLength;
                                        for (var i = 0; i < len; i++) {
                                            binary += String.fromCharCode( bytes[ i ] )
                                        }
                                        base64value =  window.btoa( binary );
                    }
                    //Use js remoting to send the base64 encoded chunk for uploading
                    DragnDropFileUploadController.uploadFile(parentId,attachmentId,currentFile.name,currentFile.type,base64value,function(result,event){
                        if( result == null) {
                          hasError = true;
                          alert('{!JSENCODE($Label.DragnDropFileUploader_Alert_Message_For_Upload_File)}');
                          refreshThePage();
                          return;
                        }
                        //Proceed if there were no errors with the remoting call
                        if(event.status == true){
                            //Update the percent of the status bar and percent, first determine percent complete
                            var percentComplete = Math.round((stopByte / currentFile.size) * 100);
                            $upload.find(".percentComplete").text(percentComplete + '%');
                            $upload.find(".statusBarPercent").css('width',percentComplete + '%');

                            //Remove the index information from the byteChunkArray array for the piece just uploaded.
                            byteChunkArray.shift(); //removes 0 index

                            //Set the attachmentId of the file we are now processing
                            attachmentId = result;

                            //Call process byteChunkArray to upload the next piece of the file
                            uploadFileAsAttachmentToRecord(attachmentId);

                        }else{
                            //If script is here something broke on the JavasSript remoting call
                            //Add classes to reflect error
                            $upload.attr('data-status','complete');
                            $upload.addClass('uploadError');
                            $upload.find(".statusBarPercent").addClass('loading-bar-error');
                            $upload.attr('title',event.message);

                            //Check and continue the next file to upload
                            uploadFiles();
                        }
                    });
                }else{
                    //Error handling for bad read
                    alert('Could not read file');
                }
            };

        }else{
            //This file has completed, all byte chunks have been uploaded, set status on the div to complete
            $upload.attr('data-status','complete');

            //Change name of file to link of uploaded attachment
            $upload.find(".name").html('<a href="' + VIEW_URL + attachmentId + '" target="_blank">'+currentFile.name+'</a>');

            //Call the uploadFiles to find the next upload div that has data-status="incomplete" and start the upload process.
            uploadFiles();
        }
}


***/

</script>


</apex:component>