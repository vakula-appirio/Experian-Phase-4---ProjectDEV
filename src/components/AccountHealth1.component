<apex:component controller="AccountHealthRadarChartController1" id="radarChart">
 <apex:attribute name="isDownloadPlan" type="Boolean" Description="To show image only for download plan type." />  
   <apex:includeScript value="{!URLFOR($Resource.chartToPdf, '/jspdf.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.chartToPdf, '/html2canvas.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.chartToPdf, '/canvas2image.js')}" />
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
    <apex:includeScript value="/soap/ajax/28.0/connection.js"/>
    <apex:includeScript value="/soap/ajax/28.0/apex.js"/>
  
  
      
      
    <style>
      .container-div{padding:30px;}
    </style>
    <script>
      var mainContainer;     
      
      sforce.connection.sessionId = "{!$Api.Session_ID}";
      
      $(document).ready(function(){
        setTimeout(
          function(){
            var txtElement;

            $('text').each(function(){
              if($(this).text() == 'StrategyAlignment') {
                txtElement = this;
                return false;
              }
            });

            $('text').each(function(){           
                $(this).css("font-size","12px");       
                $(this).css("font-family","Helvetica");               
                $(this).css("white-space","nowrap"); 
            });
            
            //Setting location of top label
            $(txtElement).attr('y', $(txtElement).attr('y')-20);
            $('svg').each(function(){
              mainContainer = this;
              return false;
            });

            //Setting height and padding for main container.
            var svgHt = $(mainContainer).attr('height');
            svgHt = parseInt(svgHt) + 50;
            $(mainContainer).attr('height',svgHt);
            $(mainContainer).css('height', svgHt+'px').css({'padding':'30px', 'min-height':svgHt+'px'});
            if({!isDownloadPlan}){
            setTimeout(function(){createPDF('{!$Component.frm.radarchart}');},500);
            }
          }, 
        500);
      });
      
      
    // Create Base64 Object to convert svc in base64 String
        var base64encodedSVG;
        var svgId;
        
        /*    Method create PDF file for Salesforce standard charts  */
        function createPDF(chart) {
            clearTemp();
            // get svg element Id
            
            // Get Id of the SVG component form apex chart id
            $("svg").each(function () {
                 svgId = this.id;
            });
            
            // Or simply pass the Id of the SVG tag in "Download PDF" button
            
            // Create temporary Div to hold image file that are created during the
            // process
            
            var svgDiv = document.createElement("div");
            svgDiv.id = 'svgdataDiv';
            svgDiv.style='display: none;';
            document.getElementById(chart).parentNode.appendChild(svgDiv);
            
            // Add SVG temp-element comtainer
            
            
            console.log('1. ================= Process Started =====================');
            // Get the base64 string code of the chart and parse that base64 string to
            // image format
            generateBase64OfGraphicImage(function() {
                // callback methods when base64 code of graph is generated continue process
                processImage();
            });
        }
        
        // Generate the base64 string of chart 
        // Charts generated by apex are based on HTML5 SVG tags
        function generateBase64OfGraphicImage(callback) {
            console.log('2. ================= Generate graphic image ==============');
            var svg = document.getElementById(svgId); // or whatever you call it
            var serializer = new XMLSerializer();
            var svgstr = serializer.serializeToString(svg);
            console.log('~~~~~~~~~~~~~~' + svgstr);
            base64encodedSVG = btoa(svgstr);
        callback();
        }
        
        // Create image file from the chart's base64 string and create canvas objtect
        // to do final merging of files (text image and graphic image)
        function processImage() {
            console.log('3. ================= Process graphic image ===============');
            var imgsrc = 'data:image/svg+xml;base64,'+ base64encodedSVG;
            // add canvas
            //<canvas width="900" height="450" id="cvs"></canvas>
            var cnvs = document.createElement("canvas");
            cnvs.width = $('#'+svgId).attr('width') != null ? $('#'+svgId).attr('width'):900;
            cnvs.width = String(parseInt(cnvs.width)+10);
            cnvs.height = $('#'+svgId).attr('width') != null ? $('#'+svgId).attr('height'):450;
            cnvs.height = String(parseInt(cnvs.height)+10);
            cnvs.id = 'cvs';
            document.getElementById('svgdataDiv').appendChild(cnvs);
        
            // Add graphics Image
            var imageSVG = document.createElement("img");
            imageSVG.src = imgsrc;
            imageSVG.style = "display:none";
            imageSVG.id = 'i1';
             document.getElementById('svgdataDiv').appendChild(imageSVG);
            
            if(imageSVG == null){
            document.getElementById('svgdataDiv').remove(imageSVG);
            
            }
            
            getTextImage(function() {
                mergeImages();
            });
        }
        
        // Charts base64 string image contains only graphics , below methods will 
        // retrieve a image that contains all text of chart
        function getTextImage(mergeImages) {
            console.log('4. ================= Process text image ==================');
            html2canvas($('#'+svgId), {
              onrendered: function(canvas) {
                theCanvas = canvas;
                //var cnt = Canvas2Image.saveAsPNG(canvas);
                var cnt = Canvas2Image.convertToPNG(canvas);
                cnt.id = 'i2';
                document.getElementById('svgdataDiv').appendChild(cnt);
                mergeImages();
              }
            });
            
        }
        
        // Merge generated graphic and text image and create pdf
        function mergeImages() {
          console.log('5. ================= Merge text and graphic images =======');
            var img1 = document.getElementById('i1');
            var img2 = document.getElementById('i2');
        
            var canvas = document.getElementById("cvs");
            var context = canvas.getContext("2d");
            var width = img1.width;
            var height = img1.height;
            canvas.width = width;
            canvas.height = height;
            // Set canvas background to white color
            context.fillStyle = "#FFFFFF";
            context.fillRect(0,0,width,height);
            
            context.drawImage(img1, 0, 0);
            console.log('6. =================draw Image ==========================');
            var image1 = context.getImageData(0, 0, width, height);
            console.log('6. ================= Get Image Data ==========================');
            var imageData1 = image1.data;
            context.putImageData(image1, 0, 0);
            var finalImage = canvas.toDataURL("image/jpeg");
            console.log('6. ================= Create PDF ==========================');
            /*var doc = new jsPDF();
            doc.setFontSize(10);
            doc.text(40, 30, "Generated PDF for Radar chart", 1);
            // adjust the Widht and Height parameter to set aspect ratio of image
            doc.addImage(finalImage, 10, 40, 180, 100);
            console.log('7. ================= Save PDF ============================');
            doc.save('RadarChart.pdf');*/
            
            var Atch = new sforce.SObject("Attachment");
            if('{!radarChartImage}' != null){
            Atch.Id = '{!radarChartImage.Id}';
            }
            Atch.ParentId = '{!accountPlanId}';
            Atch.Name = 'RadarChart';
            Atch.ContentType = 'image/jpeg';
            Atch.Body = finalImage.replace('data:image/jpeg;base64,','');
            try{
            var result = sforce.connection.upsert("Id",[Atch]);
            }catch(e){
            alert(e);
            }
            clearTemp();
        }
        
        // Clear the temp div that contains the chart images
        // Note : to see the generated images comment text of this 
        // method and set the visibilt of div 'svgdataDiv' to display=""
        function clearTemp() {
            if(document.getElementById('svgdataDiv') != null) {
                document.getElementById('svgdataDiv').remove()
            }
            base64encodedSVG = null;
        }

    </script>
    <br/>
    <apex:form id="frm">    
   
     <apex:outputPanel id="chartPanel" rendered="{!isDownloadPlan}">
        <apex:chart height="400" width="800" legend="true" data="{!data}" id="radarchart" >
            <apex:legend position="left" padding="5" /> 
            <apex:axis type="Radial" position="radial" maximum="10" minimum="0" >
                <apex:chartLabel />
            </apex:axis> 
            <apex:radarSeries xField="memName" yField="ImportanceToContact" tips="true" opacity="0.4" markerType="circle" strokeWidth="1" strokeColor="#FF0000" fill="{!importanceToContactFill}"/>
            <apex:radarSeries xField="memName" yField="ExperianStrength" tips="true" opacity="0.4" markerType="circle" strokeWidth="1" strokeColor="#00FF00" fill="{!experianStrengthFill}"/>
            <apex:radarSeries xField="memName" yField="OverallCompetitionStrength" tips="true" markerType="circle" strokeWidth="1" strokeColor="#0000FF" fill="{!overallCompetitionStrengthFill}" opacity="0.4"/>
        </apex:chart>
      <apex:outputLabel rendered="{!IF(accPlanContactList == NULL || accPlanContactList.size == 0,TRUE,FALSE)}">{!$Label.Account_Health_Status}</apex:outputLabel>
      </apex:outputPanel>
        
        
    <apex:sectionHeader title="Account Health Status" subtitle="{!accountPlan.Name}" rendered="{!isDownloadPlan != TRUE}"/>
    <apex:commandLink Value="Back to Plan" action="{!backToPlan}" rendered="{!isDownloadPlan != TRUE}"/>
    <apex:pageBlock title="Account Health Status" id="chartBlock"  rendered="{!isDownloadPlan != TRUE}">
    
        <apex:chart height="400" width="800" legend="true" data="{!data}" id="radarchart" >
            <apex:legend position="left" padding="5" />
            <apex:axis type="Radial" position="radial"  maximum="10" minimum="0"   >
                <apex:chartLabel />
            </apex:axis> 
            <apex:radarSeries xField="memName" yField="ImportanceToContact" tips="true" opacity="0.4" markerType="circle" strokeWidth="1" strokeColor="#FF0000" fill="{!importanceToContactFill}"/>
            <apex:radarSeries xField="memName" yField="ExperianStrength" tips="true" opacity="0.4" markerType="circle" strokeWidth="1" strokeColor="#00FF00" fill="{!experianStrengthFill}"/>
            <apex:radarSeries xField="memName" yField="OverallCompetitionStrength" tips="true" markerType="circle" strokeWidth="1" strokeColor="#0000FF" fill="{!overallCompetitionStrengthFill}" opacity="0.4"/>
        </apex:chart>
        <apex:outputLabel rendered="{!IF(accPlanContactList == NULL || accPlanContactList.size == 0,TRUE,FALSE)}">{!$Label.Account_Health_Status}</apex:outputLabel>
     </apex:pageBlock>
    
    <apex:pageBlock rendered="{!IF(isDownloadPlan != TRUE && accPlanContactList != NULL && accPlanContactList.size > 0,TRUE,FALSE)}" title="Account Plan Contacts">
        <apex:pageBlockTable value="{!accPlanContactList}" var="d">
            <apex:column value="{!d.Contact_Name__c}"/>
            <apex:column value="{!d.Experian_Relationship__c}"/>
            <apex:column value="{!d.LastModifiedDate}"/>
            <apex:column value="{!d.Include_in_Overall_Health_Status__c}"/>
        </apex:pageBlockTable>
    </apex:pageBlock>   
        
    </apex:form>
    
</apex:component>